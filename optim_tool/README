Explanation of the optimization code use and some examples.

The main optimization function is OPTIM_CALL(...), which takes the data to 
fit to and the model-data generator function. The latter in case of 
LPFG-LIGNUM model is OPTIM_LGM_CALL(...). The LPFG-LIGNUM model is a LPFG 
simulator based model for LIGNUM tree model.

OPTIM_CALL takes two basic arguments DATA and MODEL.

DATA is the target distribution function to optimize against. Usually one 
has that from somewhere else, e.g. experiment.

MODEL is the function handle that generates be means of some simulation
model the distribution function of the same sort as the DATA. Then OPTIM_CALL
takes care of the comparison between the two.

OPTIM_CALL must be supplied with the comparison function. By default it is
DT_DISTANCE() written by Marko Järvenpää (marko.jarvenpaa at tut.fi), 
which is not shipped with this code. Otherwise, one can use his own function
to compare. As soon as the DT_DISTANCE() code becomes available publicly, 
this will be anounced here.

OPTIM_LGM_CALL takes the vector of the parameter values and simulate the 
LPFG-LIGNUM model. It also must take the meta-language description of the
values in the vector. See the function help pages to further elaborate on the
syntax of that. Additionally, the function depends on several wrapper-functions
from lpfg_lgm package in MATLAB (must be shipped with this package), which
includes several technical functions that call and process lower level
C++/L++ routines for the LPFG-LIGNUM model.

DEPENDENCIES:
1. LPFG_LGM package (MATLAB functions)
2. LPFG-LIGNUM model (C++/L++, LPFG simulator based)

ILLUSTRATIVE EXAMPLE:

1. Get DATA from somewhere else, e.g. experiment or model-generated data.
2. Define the dimension of the optimization and model-generator function
    DIM = 6;
    MODEL_BASE = @(x,addArg)OPTIM_LGM_CALL(x,... % vector x is an input
        'args',{'BRAANG_GAUSS_1_2','ANGINCR__3','MAXANG_GAUSS_4_5','ZETASD__6'},... % description of the input
        'C',[1 1 1 0.02 800],... % constant parameter values input
        'argsConst',{'VERB__1','RNDSEED__2','PERTTUNEN1998__3','VSA__4','GSA__5'},... % description of the constants
        'scat','bra','order',1,addArg{:});% target scatter type, its order
    MODEL = @(x)MODEL_BASE(x,{''});% shortcut for the model-generator with empty additional args

When we save the result later on, we will need the MODEL_BASE function.
    
2.a Multiple DF's can be generated by the model by putting several scatter names in a cell-array.
For example, OPTIM_LGM_CALL(...,'scat',{'taper','bra','curv'},...) would produce three DF's:
tapering, branching angle, and curvature scatters.


3. Define ranges of the parameter values
    InitRange = [40 2 3  85 3 3 ;
                 50 5 10 95 5 10];
    LB = [25 0  1  70  0  1 ];
    UB = [60 10 20 100 10 20];
4. Technical parameters to the optimization solver
    INTCON = [];
    POPSIZE = 20;
    ELITE = 2;
    GENS = 50;
    STALL = 5;
5. Call to the optimization routine
    [X,Dist,Out] = OPTIM_CALL(DATA,MODEL,'nvars',DIM,...
        'opts',{'PlotFcns',{@gaplotbestf,@gaplotdistance},'PopulationSize',POPSIZE,...
        'EliteCount',ELITE,'Generations',GENS,'StallGenLimit',STALL,...
        'PopInitRange',InitRange,'OutputFcns',@optim_lgm_output},...
        'lb',LB,'ub',UB,'intcon',INTCON);
5a. Call to the optimization routine with gradient based algorithm
    INTCON = 200; % number of random initial points set up in INTCON parameter
    [X,Dist,Out] = OPTIM_CALL(DATA,MODEL,'nvars',DIM,'fmincon',...
        'opts',{},'lb',LB,'ub',UB,'intcon',INTCON);
5b. If multiple DF's are to account for, the average distance is produced. This, however,
can be a weighted average with specific weights, which can be set via OPTIM_CALL(...,'w',WGHT,...),
where WGHT is the vector of weights corresponding to the DF's in the order they were specified.

6. Save the results (OPTIONAL)
Run the model with the best solution input and generate the unique output dir name to save to
    [md,~,fname] = MODEL_BASE(X,{'outf','visual'});
Read the MTG file to get the tree structure info in MATLAB
    [tr,ts,br] = READ_MTG('lignum.mtg');
Might want to comment on the simulation
    fid = fopen('README','w');
    fprintf(fid,'BRAANG_GAUSS+ANGINCR+MAXANG_GAUSS+ZETASD\n');
    fprintf(fid,'PERTTUNEN_1998, based on ');
    fprintf(fid,'the core optimization (lchi_lapar) exper 8.3.2015_13.43\n');
    fprintf(fid,'1 order bra data set, model_data2 data-set.\n');
    fclose(fid);
Save the variables
    save('optimLgm.mat','X','Dist','Out','tr','ts','br','InitRange','LB','UB',...
        'INTCON','POPSIZE','ELITE','GENS','STALL');
Copy and move the important files into the unique directory
    copyfile('user.h',fname);
    copyfile('lgmconst.h',fname);
    movefile('optimLgm.mat',fname);
    movefile('README',fname);
    
